#include <iostream>
#include <vector>    //std::vector
#include "base64/base64.h" //base64_decode()

std::vector<unsigned short> convertToByteArray(std::string str);
std::string xorWithKey(std::string data);
// std::string decrypt(std::u16string data);

//g++ -o main main.cpp base64/base64.cpp -I base64 -I json
int main()
{
    const std::string b64="";

    std::cout<<xorWithKey(base64_decode(b64));
    

    return 0;
}

//convertit en tableau de code ASCII
std::vector<unsigned short> convertToByteArray(std::string str)
{
    std::vector<unsigned short> res;
    for(int i=0;i<str.length();++i)
        res.push_back((unsigned short)str[i]);
    return res;
}

std::string xorWithKey(std::string data)
{
    std::vector<char> v;
    auto vec1=convertToByteArray(data);
    auto vec2=convertToByteArray("key");
    for(int i=0;i<data.length();++i)
        //bitwise XOR '^'
        v.push_back((char)(vec1[i] ^ vec2[i%3]));
   std::string res(v.begin(),v.end());
   return res;
}